#include <iostream>
#include <set>

using namespace std;

set<int> goalPoint;

class Point
{
    double x, y;
    public:
        Point() {}
        void set(double xx, double yy) {
            x = xx;
            y = yy;
        }
        double getX() {
            return this->x;
        }
        double getY() {
            return this->y;
        }
};

class Insert
{
    public:
        static void insert(int num, Point *p) {
            for (int i = 0; i < num; i ++) {
                double tx, ty;
                cin >> tx >> ty;
                p->set(tx, ty);
                p ++;
            }
        }
};

class Distance
{
    public:
        static double dis(Point *p1, Point *p2, Point *p3) {
            //x1*y2 + x2*y3 + x3*y1 - x3*y2 - x1*y3 - x2*y1  大于零则k在线xy的左侧，小于零则在右侧
            double tmp = p1->getX() * p2->getY() + p2->getX() * p3->getY() + p3->getX() * p1->getY() - p3->getX() * p2->getY() - p1->getX() * p3->getY() - p2->getX() * p1->getY();
            if (tmp > 0) {
                return 1;
            }
            else if (tmp < 0) {
                return -1;
            }
            else {
                return 0;
            }
        }
};

class Solve
{
    public:
        friend Insert;
        friend Distance;
        void solve(int num, Point *p) {

            Insert::insert(num, p);

            Point *iPoint = p;
            Point *jPoint = p;
            Point *kPoint = p;
            
            for (int i = 0; i < num - 1; i ++, iPoint ++) {
                jPoint = iPoint + 1;
                for (int j = i + 1; j < num; j ++, jPoint ++ ) {
                    int inLeft = 0;
                    int inRight = 0;
                    kPoint = p;
                    for (int k = 0; k < num; k ++, kPoint ++) {
                        if (kPoint == iPoint || kPoint == jPoint) {
                            continue;
                        }

                        double tmpDis = Distance::dis(iPoint, jPoint, kPoint);
                        if (tmpDis > 0) {
                            inLeft ++;
                        }
                        else if (tmpDis < 0) {
                            inRight ++;
                        }
                    }
                    
                    if (!inLeft || !inRight) {
                        goalPoint.insert(i);
                        goalPoint.insert(j);
                    }
                }
            }
        }
};

int main()
{
    cout << "请输入点的个数(小于100)：";
    int n;
    cin >> n;
    cout << "请输入各个点的坐标：" << endl;
    Point point[105];
    Solve test;
    test.solve(n, point);
    cout << "构成凸包的点的个数为：";
    cout << goalPoint.size() << endl;
}
